@use 'sass:map';
@use 'sass:math';

@use 'element-plus/theme-chalk/src/common/var.scss' as common;
@use 'element-plus/theme-chalk/src/mixins/mixins.scss' as *;
@use 'element-plus/theme-chalk/src/color/index.scss' as *;

$colors: () !default;
@each $type in common.$types {
  $colors: map.deep-merge(
    (
      $type: (
        'base': map.get(common.$colors, $type, 'base')
      )
    ),
    $colors
  ) !global;
}

// https://sass-lang.com/documentation/values/maps#immutability
// mix colors with white/black to generate light/dark level
@mixin set-color-mix-level($type, $number, $mode: 'light', $mix-color: $color-white) {
  // hex mix color
  $colors: map.deep-merge(
    (
      $type: (
        '#{$mode}-#{$number}': mix($mix-color, map.get($colors, $type, 'base'), math.percentage(math.div($number, 10)))
      )
    ),
    $colors
  ) !global;
}

// dark-mode
@each $type in common.$types {
  @for $i from 1 through 9 {
    @include set-color-mix-level($type, $i, 'light', common.$color-white);
  }
}
@each $type in common.$types {
  @include set-color-mix-level($type, 2, 'dark', common.$color-black);
}

$text-color: () !default;
$text-color: map.merge(
  (
    'regular': #242933,
    'placeholder': #A7A9AD,
  ),
  $text-color
);

$border-color: () !default;
$border-color: map.merge(
  (
    '': #D3D4D6,
  ),
  $border-color
);

// Border
$border-width: 1px !default;
$border-style: solid !default;
$border-color-hover: getCssVar('color', 'primary') !default;

// Input
// css3 var in packages/theme-chalk/src/input.scss
$input: () !default;
$input: map.merge(
  (
    'text-color': getCssVar('text-color-regular'),
    'border': getCssVar('border'),
    'hover-border': getCssVar('border-color-hover'),
    'focus-border': getCssVar('color-primary'),
    'transparent-border': 0 0 0 1px transparent inset,
    'border-color': getCssVar('border-color'),
    'border-radius': getCssVar('border-radius-base'),
    'bg-color': getCssVar('fill-color', 'blank'),
    'icon-color': getCssVar('text-color-placeholder'),
    'placeholder-color': getCssVar('text-color-placeholder'),
    'hover-border-color': getCssVar('border-color-hover'),
    'clear-hover-color': getCssVar('text-color-secondary'),
    'focus-border-color': getCssVar('color-primary'),
  ),
  $input
);

// Input
$input-disabled: () !default;
$input-disabled: map.merge(
  (
    'fill': getCssVar('button', 'disabled-bg-color'),
    'border': getCssVar('button', 'disabled-text-color'),
    'text-color': getCssVar('button', 'disabled-text-color'),
    'placeholder-color': getCssVar('button', 'disabled-text-color'),
  ),
  $input-disabled
);

// Button
$button: () !default;
$button: map.merge(
  (
    'disabled-text-color': #D3D4D6,
    'disabled-border-color': #E9E9EA,
    'disabled-bg-color': #F8F8F9,
  ),
  $button
);

// fill
$fill-color: () !default;
$fill-color: map.merge(
  (
    '': #F8F8F9,
    'light': #FFFFFF,
    'dark': #F8F8F9,
  ),
  $fill-color
);

// mask
$mask-color: () !default;
$mask-color: map.merge(
  (
    'extra-light': rgba(0, 0, 0, 0)
  ),
  $mask-color
);

