@use 'sass:map';

@use 'element-plus/theme-chalk/src/mixins/mixins' as *;
@use 'element-plus/theme-chalk/src/mixins/var' as *;
@use './var.scss' as *;

@include b(tag) {
  @include set-component-css-var('tag', $tag);
}

$tag-border-width: 1px;
$types: primary, success, warning, danger, error, info;

$tag-icon-span-gap: () !default;
$tag-icon-span-gap: map.merge(
  (
    'large': 4px,
    'default': 4px,
    'small': 4px,
  ),
  $tag-icon-span-gap
);

@function returnVarList($var, $type: 'primary') {
  $list: ('fill-color', 'blank');
  @if $var != false {
    $list: ('color', $type, $var);
  }
  @return $list;
}
// false mean --el-color-white
@mixin genTheme($backgroundColorWeight, $borderColorWeight, $hoverColorWeight) {
  @include css-var-from-global(
    ('tag', 'bg-color'),
    returnVarList($backgroundColorWeight)
  );
  @include css-var-from-global(
    ('tag', 'border-color'),
    returnVarList($borderColorWeight)
  );
  @include css-var-from-global(
    ('tag', 'hover-color'),
    returnVarList($hoverColorWeight)
  );

  @each $type in $types {
    &.#{bem('tag', '', $type)} {
      @include css-var-from-global(
        ('tag', 'bg-color'),
        returnVarList($backgroundColorWeight, $type)
      );
      @include css-var-from-global(
        ('tag', 'border-color'),
        returnVarList($borderColorWeight, $type)
      );
      @include css-var-from-global(
        ('tag', 'hover-color'),
        returnVarList($hoverColorWeight, $type)
      );
    }
  }
}

@include b(tag) {
  @include genTheme('light-2', '', '');
  padding: 0 map.get($tag-padding, 'default') - $border-width;
  

  @each $type in $types {
    &.#{bem('tag', '', $type)} {
      @if $type == 'info' {
        @include css-var-from-global(('tag', 'text-color'), ('text-color', 'regular'));
      }
      @include css-var-from-global(('tag', 'bg-color'), ('color', $type, 'light-2'));
      @include css-var-from-global(('tag', 'border-color'), ('color', $type));
    }
  }

  .#{$namespace}-tag__close {
    margin-left: map.get($tag-icon-span-gap, 'default');
  }

  @include set-css-var-value('icon-size', 10px);

  .#{$namespace}-icon {
    height: getCssVar('icon-size');
    width: getCssVar('icon-size');
  }

  @include m(dark) {
    @include genTheme('', '', '');


    @each $type in $types {
      &.#{bem('tag', '', $type)} {
        @if $type == 'info' {
          @include css-var-from-global(('tag', 'text-color'), ('text-color', 'regular'));
        }
      }
    }
  }

  @include m(plain) {
    @include genTheme(false, '', '');

    @each $type in $types {
      &.#{bem('tag', '', $type)} {
        @if $type == 'info' {
          @include css-var-from-global(('tag', 'text-color'), ('text-color', 'regular'));
          @include css-var-from-global(('tag', 'border-color'), ('border-color', ''));
        }
      }
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      padding: 0 map.get($tag-padding, $size) - $tag-border-width;
      height: map.get($tag-height, $size);
    }
  }
}