@use 'sass:map';

@use './var.scss' as *;
@use '../../mixins/button' as *;
@use 'element-plus/theme-chalk/src/mixins/mixins' as *;
@use 'element-plus/theme-chalk/src/mixins/utils' as *;
@use 'element-plus/theme-chalk/src/mixins/var' as *;

$button-icon-span-gap: () !default;
$button-icon-span-gap: map.merge(
  (
    'large': 8px,
    'default': 6px,
    'small': 4px,
  ),
  $button-icon-span-gap
);

@include b(button) {
  @include set-component-css-var('button', $button);
}

@include b(button) {

   @include button-size(
    map.get($button-padding-vertical, 'default') - $button-border-width,
    map.get($button-padding-horizontal, 'default') - $button-border-width,
    map.get($button-font-size, 'default'),
    map.get($button-border-radius, 'default')
  );

  @include when(plain) {
    @include css-var-from-global(
      ('button', 'hover', 'text-color'),
      ('color', 'primary')
    );
    @include css-var-from-global(
      ('button', 'hover', 'bg-color'),
      ('fill-color', 'blank')
    );
    @include css-var-from-global(
      ('button', 'hover', 'border-color'),
      ('color', 'primary')
    );
    @include css-var-from-global(
      ('button', 'active', 'text-color'),
      ('color', 'primary-dark-2')
    );
    @include css-var-from-global(
      ('button', 'active', 'border-color'),
      ('color', 'primary-dark-2')
    )
  }

  @include when(text) {
    &:not(.is-disabled) {
      &:hover,
      &:focus {
        color: getCssVar('color', 'primary');
      }

      &:active {
        color: getCssVar('color', 'primary', 'dark-2');
        background-color: getCssVar('color','white');
      }
    }
  }

  @include when(link) {
    &:not(.is-disabled) {
      &:hover,
      &:focus {
        color: getCssVar('color', 'primary');
      }

      &:active {
        color: getCssVar('color', 'primary', 'dark-2');
      }
    }
  }

  @each $type in (primary, success, warning, danger, info) {
    @include m($type) {
      @include button-variant($type);

      @include css-var-from-global(
        ('button', 'active', 'text-color'),
        ('color', 'white')
      );

      &.is-link {
        color: getCssVar('color', $type);

        &:hover,
        &:focus {
          color: getCssVar('color', $type, 'light-3');
        }

        &:active {
          color: getCssVar('color', $type, 'dark-2');
        }

        &.is-disabled {
          color: getCssVar('color', $type, 'light-5');
        } 
      }

      &.is-text {
        color: getCssVar('color', $type);

        &:not(.is-disabled) {
          &:hover,
          &:focus {
            color: getCssVar('color', $type, 'light-3');
          }

          &:active {
            color: getCssVar('color', $type, 'dark-2');
            background-color: getCssVar('color', 'white');
          }
        }

        &.is-disabled {
          color: getCssVar('color', $type, 'light-5') !important;
        } 

        &.is-has-bg {
          color: getCssVar('color', $type);

          &:hover,
          &:focus,
          &:active {
            color: getCssVar('color', $type);
          }
        }
      }
    }
  }

  @each $size in (large, small) {
    @include m($size) {
      @include set-css-var-value(
        ('button', 'size'),
        map.get($input-height, $size)
      );

      height: getCssVar('button', 'size');

      & [class*='#{$namespace}-icon'] {
        & + span {
          margin-left: map.get($button-icon-span-gap, $size);
        }
      }

      @include button-size(
        map.get($button-padding-vertical, $size) - $button-border-width,
        map.get($button-padding-horizontal, $size) - $button-border-width,
        map.get($button-font-size, $size),
        map.get($button-border-radius, $size)
      );

      @include when(circle) {
        width: getCssVar('button', 'size');
        padding: map.get($button-padding-vertical, $size) - $button-border-width;
      }
    }
  }
}
